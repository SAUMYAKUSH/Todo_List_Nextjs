import Head from "next/head";
import TodoList from "@/Components/TodoList/TodoList";
import { MongoClient } from "mongodb";
import TodoForm from "@/Components/Form/TodoForm";
import { useRouter } from "next/router";
import { useState } from "react";

export default function Home(props) {
  const router = useRouter();
  const [editingTodo, setEditingTodo] = useState(null);

  const addTodoHandler = async (enteredTodoData) => {
    const response = await fetch("/api/newtodo", {
      method: "POST",
      body: JSON.stringify(enteredTodoData),
      headers: {
        "Content-type": "application/json",
      },
    });

    const data = await response.json();

    router.push("/");
  };

  const deleteTodoHandler = async (id) => {
    const response = await fetch("/api/deletetodo", {
      method: "DELETE",
      body: JSON.stringify({ _id: id }),
      headers: {
        "Content-type": "application/json",
      },
    });
    const data = await response.json();
  };

  const completeTodoHandler = async (id) => {
    const response = await fetch("/api/completetodo", {
      method: "PUT",
      body: JSON.stringify({ _id: id }),
      headers: {
        "Content-type": "application/json",
      },
    });
    const data = await response.json();
  };

  const editTodoHandler = async (todo) => {
    setEditingTodo(todo);
    const response = await fetch("/api/edittodo", {
      method: "PUT",
      body: JSON.stringify({ _id: todo._id, data: todo.todo }),
      headers: {
        "Content-type": "application/json",
      },
    });
    const res = await response.json();
    if (res.message === "Todo Updated") {
      router.push("/");
    }
  };

  return (
    <>
      <Head>
        <title>Todo App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <TodoList
        todos={props.todos}
        onDeleteTodo={deleteTodoHandler}
        onCompleteTodo={completeTodoHandler}
        onEditTodo={editTodoHandler}
      />
      <TodoForm
        onAddTodo={addTodoHandler}
        onEditTodo={editTodoHandler}
        editingTodo={editingTodo}
      />
    </>
  );
}

export async function getStaticProps() {
  const client = await MongoClient.connect(
    "mongodb+srv://MayankTiwari:x3vyqTqhpWEGXcwR@cluster0.qg8qp18.mongodb.net/todos?retryWrites=true&w=majority"
  );

  const db = client.db();

  const todoCollection = db.collection("todos");

  const todos = await todoCollection.find({ completed: false }).toArray();

  const serializedTodos = todos.map((todo) => {
    return {
      ...todo,
      _id: todo._id.toString(),
    };
  });

  client.close();

  return {
    props: {
      todos: serializedTodos,
    },
    revalidate: 1,
  };
}
